import { v } from "convex/values";
import { mutation, query } from "./_generated/server";

export const listMessages = query({
  args: {
    videoId: v.id("video"),
    userId: v.string(),
  },
  handler: async (ctx, args) => {
    const messages = await ctx.db
      .query("messages")
      .withIndex("by_user_and_video", (q) =>
        q.eq("userId", args.userId).eq("videoId", args.videoId)
      )
      .order("asc")
      .collect();

    console.log("Retrieved messages : ", {
      videoId: args.videoId,
      count: messages.length,
    });

    return messages;
  },
});

export const sendMessage = mutation({
  args: {
    videoId: v.id("video"),
    userId: v.string(),
    content: v.string(),
  },
  handler: async (ctx, args) => {
    console.log("Sending message", {
      videoId: args.videoId,
      content: args.content,
    });

    const messageId = await ctx.db.insert("messages", {
      videoId: args.videoId,
      userId: args.userId,
      content: args.content.replace(/\n/g, "\\n"),
      role: "user",
      createdAt: Date.now(),
    });

    console.log("Sent message", {
      messageId,
      videoId: args.videoId,
    });

    return messageId;
  },
});

export const store = mutation({
  args: {
    videoId: v.id("video"),
    userId: v.string(),
    content: v.string(),
    role: v.union(
      v.literal("user"),
      v.literal("assistant"),
      v.literal("system"),
      v.literal("data")
    ),
  },
  handler: async (ctx, args) => {
    console.log("ðŸ’¾ Storing message:", {
      videoId: args.videoId,
      role: args.role,
      contentLength: args.content.length,
    });

    // Store message with preserved newlines and HTML
    const messageId = await ctx.db.insert("messages", {
      videoId: args.videoId,
      userId: args.userId,
      content: args.content
        .replace(/\n/g, "\\n")
        // Don't escape HTML - we'll trust the content since it's generated by our system
        .replace(/\\/g, "\\\\"), // Only escape backslashes
      role: args.role,
      createdAt: Date.now(),
    });

    console.log("âœ… Stored message:", {
      messageId,
      videoId: args.videoId,
      role: args.role,
    });

    return messageId;
  },
});

export const getLastMessage = query({
  args: { videoId: v.id("video"), userId: v.string() },
  handler: async (ctx, args) => {
    const lastMessage = await ctx.db
      .query("messages")
      .withIndex("by_user_and_video", (q) =>
        q.eq("userId", args.userId).eq("videoId", args.videoId)
      )
      .order("desc")
      .first();

    return lastMessage;
  },
});
